// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ManagerSolution.RN.DAO;

namespace ManagerSolution.RN.Migrations
{
    [DbContext(typeof(ConecaoContext))]
    partial class ConecaoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManagerSolution.RN.Models.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MedicoId");

                    b.Property<int>("PacienteId");

                    b.Property<string>("Plano");

                    b.Property<DateTime>("data");

                    b.Property<string>("hora");

                    b.Property<string>("observacao");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendamento");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Anamnese", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Antecedentes");

                    b.Property<string>("Diagnostico");

                    b.Property<string>("ExameFisico");

                    b.Property<string>("HDA");

                    b.Property<string>("QP");

                    b.Property<string>("TPR");

                    b.Property<string>("componentePrescrito");

                    b.HasKey("ID");

                    b.ToTable("Anamnese");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Atendente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioId");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Atendente");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Atendimentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MedicoId");

                    b.Property<int>("PacienteId");

                    b.Property<string>("Plano");

                    b.Property<DateTime>("data");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Atendente");

                    b.Property<bool>("Medico");

                    b.Property<bool>("Paciente");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Componente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Componente");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Componente_Paciente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Componente");

                    b.Property<int>("PacienteId");

                    b.HasKey("ID");

                    b.HasIndex("PacienteId");

                    b.ToTable("Componente_Paciente");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Componente_Remedio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Componente");

                    b.Property<int>("PacienteId");

                    b.HasKey("ID");

                    b.HasIndex("PacienteId");

                    b.ToTable("Componente_RemediosContext");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Consulta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnamneseId");

                    b.Property<DateTime>("Data");

                    b.Property<int>("MedicoId");

                    b.Property<string>("Observacao");

                    b.Property<int>("PacienteId");

                    b.HasKey("ID");

                    b.HasIndex("AnamneseId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Endereco", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cidade");

                    b.Property<string>("Numero");

                    b.Property<string>("rua");

                    b.HasKey("ID");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Funcionario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioId");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.HistoriaPatologicaPregressa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HF");

                    b.Property<string>("HPP");

                    b.Property<string>("HistoriaSocial");

                    b.HasKey("ID");

                    b.ToTable("HistoriaPatologicaPregressaContext");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Medico", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaDeAtuacao");

                    b.Property<string>("CRM");

                    b.Property<string>("Situacao");

                    b.Property<int>("UsuarioId");

                    b.Property<string>("nome");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Paciente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF");

                    b.Property<int>("EnderecoId");

                    b.Property<string>("Naturalidade");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.Property<int>("UsuarioId");

                    b.Property<DateTime>("data");

                    b.Property<byte[]>("imagem");

                    b.Property<string>("sexo");

                    b.HasKey("ID");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Prontuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HistoriaPatologicaPregressaId");

                    b.Property<string>("Observacoes");

                    b.Property<int>("PacienteId");

                    b.HasKey("ID");

                    b.HasIndex("HistoriaPatologicaPregressaId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Prontuario");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Remedio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("PrincipioAtivo");

                    b.HasKey("ID");

                    b.ToTable("Remedio");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaId");

                    b.Property<string>("Password");

                    b.Property<string>("User");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Agendamento", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Atendente", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Atendimentos", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Componente_Paciente", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Componente_Remedio", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Consulta", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Anamnese", "Anamnese")
                        .WithMany()
                        .HasForeignKey("AnamneseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Funcionario", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Medico", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Paciente", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Prontuario", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.HistoriaPatologicaPregressa", "HistoriaPatologicaPregressa")
                        .WithMany()
                        .HasForeignKey("HistoriaPatologicaPregressaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ManagerSolution.RN.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManagerSolution.RN.Models.Usuario", b =>
                {
                    b.HasOne("ManagerSolution.RN.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
